// sprint3
#include <iostream>
#include <vector>
#include <Windows.h>
#include <fstream>
using namespace std;

int main() {
    int NI = 50, NO = 30;
    int elapsedSeconds = 0;
    int T = 1;  // 1 sec
    vector<int> queue;
    int NofPackets[120] = { 0 };
    int capacity = 100;
    ofstream myfile("NofPackets.txt");

    while (elapsedSeconds < 120) {  // for 2 minutes
        Sleep(T * 1000);  // milliseconds
        int ni = rand() % NI;
        int no = rand() % NO;

        if (capacity < queue.size() + ni) {
            ni = capacity - queue.size();
        }

        for (int i = 0; i < ni; i++) {
            queue.push_back(rand() % 20);
            cout << queue[queue.size() - 1] << " in " << queue.size() << endl;
        }

        for (int i = 0; i < no; i++) {
            if (queue.size() != 0) {
                int ii = queue[0];
                cout << ii << " out " << queue.size() << endl;
                queue.erase(queue.begin());
            }
        }
        NofPackets[elapsedSeconds] = queue.size();
        elapsedSeconds += T;
        cout << "Elapsed time[sec] = " << elapsedSeconds << " Queue Size: " << queue.size() << endl;
    }

    for (int i = 0; i < 120; i++) {
        myfile << i+1 << " " << NofPackets[i] << "\n";
    }
    myfile.close();

    // Calculate and print average and peak values
    int sum = 0;
    int peak = NofPackets[0];
    for (int i = 0; i < 120; i++) {
        sum += NofPackets[i];
        if (NofPackets[i] > peak) {
            peak = NofPackets[i];
        }
    }
    double average = static_cast<double>(sum) / 120;
    cout << "AVERAGE: " << average << endl;
    cout << "MAX_VALUE: " << peak << endl;

    return 0;
}
